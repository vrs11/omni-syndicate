<?php

/**
 * @file
 * Primary module hooks for Stated entity reference module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\stated_entity_reference\Entity\StatedEntityReference;
use Drupal\stated_entity_reference\Entity\StatedEntityReferenceInterface;
use Drupal\stated_entity_reference\FormManager;
use Drupal\user\UserInterface;
use Drupal\stated_entity_reference\Entity\StatedEntityReferenceType;
use Drupal\workflow\Entity\WorkflowTransitionInterface;

/**
 * Implements hook_theme().
 */
function stated_entity_reference_theme(): array {
  return [
    'stated_entity_reference' => ['render element' => 'elements'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function stated_entity_reference_theme_suggestions_stated_entity_reference(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#stated_entity_reference'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'stated_entity_reference__' . $sanitized_view_mode;
  $suggestions[] = 'stated_entity_reference__' . $entity->bundle();
  $suggestions[] = 'stated_entity_reference__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'stated_entity_reference__' . $entity->id();
  $suggestions[] = 'stated_entity_reference__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}


/**
 * Prepares variables for Stated entity reference templates.
 *
 * Default template: entity-reference-state.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the Stated entity reference information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_stated_entity_reference(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function stated_entity_reference_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_reassign':
      stated_entity_reference_user_predelete($account);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function stated_entity_reference_workflow_transition_presave(WorkflowTransitionInterface $transition) {
  stated_entity_reference_stated_entity_reference_presave($transition->getTargetEntity());
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function stated_entity_reference_stated_entity_reference_predelete(StatedEntityReferenceInterface $entity): void {
  stated_entity_reference_stated_entity_reference_presave($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function stated_entity_reference_stated_entity_reference_presave(StatedEntityReferenceInterface $entity): void {
  Cache::invalidateTags([
    $entity->getSourceEntity()?->getEntityTypeId() . ':' . $entity->getSourceEntity()?->id(),
    $entity->getTargetEntity()?->getEntityTypeId() . ':' . $entity->getTargetEntity()?->id(),
  ]);
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function stated_entity_reference_user_predelete(UserInterface $account): void {
  // Delete Stated entity references that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('stated_entity_reference');
  $stated_entity_reference_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach ($storage->loadMultiple($stated_entity_reference_ids) as $stated_entity_reference) {
    $stated_entity_reference->setOwnerId(0)->save();
  }
}

/**
 * Alter "pseudo-field" components on content entities.
 *
 * @param array $info
 *   The array structure is identical to that of the return value of
 *   \Drupal\Core\Entity\EntityFieldManagerInterface::getExtraFields().
 *
 * @see hook_entity_extra_field_info()
 */
function stated_entity_reference_entity_extra_field_info_alter(&$info) {
  foreach (StatedEntityReferenceType::loadMultiple() as $type) {
    [$entity_type, $bundle] = explode(':', $type->getSourceBundle());
    $info[$entity_type][$bundle]['form'][$type->id() . '_stated_entity_reference'] = [
      'label' => $type->label(),
      'description' => t('Stated entity reference field for @label', ['@label' => $type->label()]),
      'weight' => 0,
    ];

    $info[$entity_type][$bundle]['display'][$type->id() . '_stated_entity_reference'] = [
      'label' => $type->label(),
      'description' => t('Stated entity reference field for @label', ['@label' => $type->label()]),
      'weight' => 0,
    ];
  }
}

/**
 * Perform alterations before a form is rendered.
 *
 * @see hook_form_BASE_FORM_ID_alter()
 * @see hook_form_FORM_ID_alter()
 */
function stated_entity_reference_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    !(($form_object = $form_state->getFormObject()) instanceof EntityForm)
    || $form_object->getOperation() != 'edit'
  ) {
    return;
  }

  $type = $form_object->getEntity()->getEntityTypeId();
  $bundle = $form_object->getEntity()->bundle();

  $ref_types = \Drupal::entityTypeManager()->getStorage('stated_entity_reference_type')->loadByProperties([
    'source_bundle' => "{$type}:{$bundle}",
  ]);
  if (empty($ref_types)) {
    return;
  }

  $form['#process'][] = [FormManager::class, 'processForm'];
  $form_manager = \Drupal::service('stated_entity_reference.form.manager');
  foreach ($ref_types as $ref_type) {
    $key = $ref_type->id() . '_stated_entity_reference';
    $form[$key] = [
      '#type' => 'details',
      '#title' => $ref_type->label(),
    ];

    $entity = $form_object->getEntity();
    $refs = \Drupal::entityTypeManager()->getStorage('stated_entity_reference')->loadByProperties([
      'type' => $ref_type->id(),
      'source_entity_id__target_id' => $entity->id(),
      'source_entity_id__target_type' => $entity->getEntityTypeId(),
    ]);

    foreach ($refs as $ref) {
      $form[$key][$ref->id() . '_remove'] = [
        '#type' => 'link',
        '#title' => t('Remove @label', ['@label' => $ref->getTargetEntity()->getTitle()]),
        '#access' => $entity->access('update'),
        '#attributes' => [
          'class' => ['button', 'use-ajax'],
          'data-dialog-type' => 'modal',
          'data-dialog-options' => Json::encode([
            'width' => 880,
          ]),
        ],
        '#url' => Url::fromRoute('entity.stated_entity_reference.delete_form', [
          'stated_entity_reference' => $ref->id(),
          'destination' => Url::fromRoute('<current>')->toString(),
        ]),
        '#attached' => [
          'library' => ['core/drupal.dialog.ajax'],
        ],
      ];
    }

    $ref = StatedEntityReference::create(['type' => $ref_type->id()]);
    $form_manager->processEntityForm($form, $form_state, [$key, 'new_reference'], $ref, $form_object->getEntity());
  }
}

/**
 * Implements hook_entity_view().
 */
function stated_entity_reference_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $type = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  $ref_types = \Drupal::entityTypeManager()->getStorage('stated_entity_reference_type')->loadByProperties([
    'source_bundle' => "{$type}:{$bundle}",
  ]);
  if (empty($ref_types)) {
    return;
  }

  foreach ($ref_types as $ref_type) {
    $refs = \Drupal::entityTypeManager()->getStorage('stated_entity_reference')->loadByProperties([
      'type' => $ref_type->id(),
      'source_entity_id__target_id' => $entity->id(),
      'source_entity_id__target_type' => $entity->getEntityTypeId(),
    ]);
    $refs = array_filter($refs, fn($ref) => $ref->access('view'), ARRAY_FILTER_USE_BOTH);
    if (empty($refs)) {
      continue;
    }

    $key = $ref_type->id() . '_stated_entity_reference';
    $build[$key] = [
      '#type' => 'details',
      '#title' => $ref_type->label(),
      '#open' => TRUE,
    ];

    $reference_view_builder = \Drupal::entityTypeManager()->getViewBuilder('stated_entity_reference');
    $build[$key]['refs'] = $reference_view_builder->viewMultiple($refs, 'entity_reference_source_page');
  }
}
