<?php

/**
 * @file
 * Contains dynamic_ownership.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\user\EntityOwnerInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function dynamic_ownership_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dynamic_ownership module.
    case 'help.page.dynamic_ownership':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      return $output;
  }
}

/**
 * Implements hook_entity_storage_load().
 */
function dynamic_ownership_entity_storage_load(array $entities, $entity_type) {
  $user_ownership_storage = \Drupal::entityTypeManager()->getStorage('user_ownership');
  $account = \Drupal::currentUser();
  foreach ($entities as $entity) {
    $ownerships = $user_ownership_storage->loadByProperties([
      'user_id' => $account->id(),
      'entity_id__target_id' => $entity->id(),
      'entity_id__target_type' => $entity->getEntityTypeId(),
      'state' => 'active',
    ]);

    foreach ($ownerships as $ownership) {
      $became_owner = $ownership->get('type')->entity->isMakingEntityOwner();
      if ($entity instanceof EntityOwnerInterface && $became_owner) {
        $entity->setOwnerId($account->id());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function dynamic_ownership_node_delete(NodeInterface $node) {
  $user_ownership_storage = \Drupal::entityTypeManager()->getStorage('user_ownership');
  $ids = $user_ownership_storage->loadByProperties([
    'entity_id__target_id' => $node->id(),
    'entity_id__target_type' => 'node',
  ]);

  if (empty($ids)) {
    return;
  }

  $user_ownership_storage->delete($ids);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function dynamic_ownership_user_delete(UserInterface $user) {
  $user_ownership_storage = \Drupal::entityTypeManager()->getStorage('user_ownership');
  $ids = $user_ownership_storage->loadByProperties([
    'user_id' => $user->id(),
  ]);

  if (empty($ids)) {
    return;
  }
  \Drupal::logger('dynamic_ownership')->notice('ownership deleted');
  $user_ownership_storage->delete($ids);
}

/**
 * Checks if given permission is granted to at least one of given roles.
 *
 * @param string $permission
 *   Permission to check for.
 * @param array $roles
 *   Array of roles to check among.
 *
 * @return bool
 *   TRUE if permission is granted to at least one role.
 */
function user_ownership_access_check(string $permission, array $roles): bool {
  return \Drupal::entityTypeManager()->getStorage('user_role')->isPermissionInRoles($permission, $roles);
}

/**
 * Implements hook_theme().
 */
function dynamic_ownership_theme() {
  $theme = [];
  $theme['user_ownership'] = [
    'render element' => 'elements',
    'file' => 'user_ownership.page.inc',
    'template' => 'user_ownership',
  ];
  $theme['user_ownership_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'user_ownership.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function dynamic_ownership_theme_suggestions_user_ownership(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#user_ownership'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'user_ownership__' . $sanitized_view_mode;
  $suggestions[] = 'user_ownership__' . $entity->bundle();
  $suggestions[] = 'user_ownership__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'user_ownership__' . $entity->id();
  $suggestions[] = 'user_ownership__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}
